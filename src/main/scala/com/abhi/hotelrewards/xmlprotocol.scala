// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.abhi.hotelrewards

import scala.concurrent.Future


/**
usage:
val obj = scalaxb.fromXML[com.abhi.hotelrewards.Foo](node)
val document = scalaxb.toXML[com.abhi.hotelrewards.Foo](obj, "foo", com.abhi.hotelrewards.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(None -> "http://www.hotelrewards.com/webservices/",
    Some("tns") -> "http://www.hotelrewards.com/webservices/",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Comabhihotelrewards_DateTimeOnServerFormat: scalaxb.XMLFormat[com.abhi.hotelrewards.DateTimeOnServer] = new DefaultComabhihotelrewards_DateTimeOnServerFormat {}
  implicit lazy val Comabhihotelrewards_DateTimeOnServerResponseFormat: scalaxb.XMLFormat[com.abhi.hotelrewards.DateTimeOnServerResponse] = new DefaultComabhihotelrewards_DateTimeOnServerResponseFormat {}
  implicit lazy val Comabhihotelrewards_PlatinumRequestFormat: scalaxb.XMLFormat[com.abhi.hotelrewards.PlatinumRequest] = new DefaultComabhihotelrewards_PlatinumRequestFormat {}
  implicit lazy val Comabhihotelrewards_PlatinumRequestResponseFormat: scalaxb.XMLFormat[com.abhi.hotelrewards.PlatinumRequestResponse] = new DefaultComabhihotelrewards_PlatinumRequestResponseFormat {}
  implicit lazy val Comabhihotelrewards_PlatinumRequest2Format: scalaxb.XMLFormat[com.abhi.hotelrewards.PlatinumRequest2] = new DefaultComabhihotelrewards_PlatinumRequest2Format {}
  implicit lazy val Comabhihotelrewards_PlatinumRequest2ResponseFormat: scalaxb.XMLFormat[com.abhi.hotelrewards.PlatinumRequest2Response] = new DefaultComabhihotelrewards_PlatinumRequest2ResponseFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("string"), Some("http://www.hotelrewards.com/webservices/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[String](elem)))
      case (Some("PlatinumRequest2"), Some("http://www.hotelrewards.com/webservices/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.abhi.hotelrewards.PlatinumRequest2](elem)))
      case (Some("PlatinumRequest"), Some("http://www.hotelrewards.com/webservices/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.abhi.hotelrewards.PlatinumRequest](elem)))
      case (Some("DateTimeOnServer"), Some("http://www.hotelrewards.com/webservices/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.abhi.hotelrewards.DateTimeOnServer](elem)))
      case (Some("DateTimeOnServerResponse"), Some("http://www.hotelrewards.com/webservices/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.abhi.hotelrewards.DateTimeOnServerResponse](elem)))
      case (Some("PlatinumRequestResponse"), Some("http://www.hotelrewards.com/webservices/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.abhi.hotelrewards.PlatinumRequestResponse](elem)))
      case (Some("PlatinumRequest2Response"), Some("http://www.hotelrewards.com/webservices/") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[com.abhi.hotelrewards.PlatinumRequest2Response](elem)))

      case _ => None
    }
  }

  trait DefaultComabhihotelrewards_DateTimeOnServerFormat extends scalaxb.XMLFormat[com.abhi.hotelrewards.DateTimeOnServer] with scalaxb.CanWriteChildNodes[com.abhi.hotelrewards.DateTimeOnServer] {
    val targetNamespace: Option[String] = Some("http://www.hotelrewards.com/webservices/")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, com.abhi.hotelrewards.DateTimeOnServer] = seq match {
      case node: scala.xml.Node => Right(com.abhi.hotelrewards.DateTimeOnServer())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: com.abhi.hotelrewards.DateTimeOnServer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultComabhihotelrewards_DateTimeOnServerResponseFormat extends scalaxb.ElemNameParser[com.abhi.hotelrewards.DateTimeOnServerResponse] {
    val targetNamespace: Option[String] = Some("http://www.hotelrewards.com/webservices/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.abhi.hotelrewards.DateTimeOnServerResponse] =
      phrase(opt(scalaxb.ElemName(Some("http://www.hotelrewards.com/webservices/"), "DateTimeOnServerResult")) ^^
      { case p1 =>
      com.abhi.hotelrewards.DateTimeOnServerResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.abhi.hotelrewards.DateTimeOnServerResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.DateTimeOnServerResult map { scalaxb.toXML[String](_, Some("http://www.hotelrewards.com/webservices/"), Some("DateTimeOnServerResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComabhihotelrewards_PlatinumRequestFormat extends scalaxb.ElemNameParser[com.abhi.hotelrewards.PlatinumRequest] {
    val targetNamespace: Option[String] = Some("http://www.hotelrewards.com/webservices/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.abhi.hotelrewards.PlatinumRequest] =
      phrase(opt(scalaxb.ElemName(Some("http://www.hotelrewards.com/webservices/"), "astrXML")) ~ 
      opt(scalaxb.ElemName(Some("http://www.hotelrewards.com/webservices/"), "astrError")) ^^
      { case p1 ~ p2 =>
      com.abhi.hotelrewards.PlatinumRequest(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.abhi.hotelrewards.PlatinumRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.astrXML map { scalaxb.toXML[String](_, Some("http://www.hotelrewards.com/webservices/"), Some("astrXML"), __scope, false) } getOrElse {Nil},
        __obj.astrError map { scalaxb.toXML[String](_, Some("http://www.hotelrewards.com/webservices/"), Some("astrError"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComabhihotelrewards_PlatinumRequestResponseFormat extends scalaxb.ElemNameParser[com.abhi.hotelrewards.PlatinumRequestResponse] {
    val targetNamespace: Option[String] = Some("http://www.hotelrewards.com/webservices/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.abhi.hotelrewards.PlatinumRequestResponse] =
      phrase((scalaxb.ElemName(Some("http://www.hotelrewards.com/webservices/"), "PlatinumRequestResult")) ~ 
      opt(scalaxb.ElemName(Some("http://www.hotelrewards.com/webservices/"), "astrXML")) ~ 
      opt(scalaxb.ElemName(Some("http://www.hotelrewards.com/webservices/"), "astrError")) ^^
      { case p1 ~ p2 ~ p3 =>
      com.abhi.hotelrewards.PlatinumRequestResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.abhi.hotelrewards.PlatinumRequestResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Boolean](__obj.PlatinumRequestResult, Some("http://www.hotelrewards.com/webservices/"), Some("PlatinumRequestResult"), __scope, false),
        __obj.astrXML map { scalaxb.toXML[String](_, Some("http://www.hotelrewards.com/webservices/"), Some("astrXML"), __scope, false) } getOrElse {Nil},
        __obj.astrError map { scalaxb.toXML[String](_, Some("http://www.hotelrewards.com/webservices/"), Some("astrError"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComabhihotelrewards_PlatinumRequest2Format extends scalaxb.ElemNameParser[com.abhi.hotelrewards.PlatinumRequest2] {
    val targetNamespace: Option[String] = Some("http://www.hotelrewards.com/webservices/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.abhi.hotelrewards.PlatinumRequest2] =
      phrase(opt(scalaxb.ElemName(Some("http://www.hotelrewards.com/webservices/"), "TRANSACTION_XML")) ^^
      { case p1 =>
      com.abhi.hotelrewards.PlatinumRequest2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.abhi.hotelrewards.PlatinumRequest2, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.TRANSACTION_XML map { scalaxb.toXML[String](_, Some("http://www.hotelrewards.com/webservices/"), Some("TRANSACTION_XML"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultComabhihotelrewards_PlatinumRequest2ResponseFormat extends scalaxb.ElemNameParser[com.abhi.hotelrewards.PlatinumRequest2Response] {
    val targetNamespace: Option[String] = Some("http://www.hotelrewards.com/webservices/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[com.abhi.hotelrewards.PlatinumRequest2Response] =
      phrase(opt(scalaxb.ElemName(Some("http://www.hotelrewards.com/webservices/"), "PlatinumRequest2Result")) ^^
      { case p1 =>
      com.abhi.hotelrewards.PlatinumRequest2Response(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: com.abhi.hotelrewards.PlatinumRequest2Response, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.PlatinumRequest2Result map { scalaxb.toXML[String](_, Some("http://www.hotelrewards.com/webservices/"), Some("PlatinumRequest2Result"), __scope, false) } getOrElse {Nil})

  }


  trait PlatinumWebServiceSoap12Bindings { this: scalaxb.SoapClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("http://www.hotelrewards.com/webservices/")
    lazy val service: com.abhi.hotelrewards.PlatinumWebServiceSoap = new PlatinumWebServiceSoap12Binding {}
    def baseAddress = new java.net.URI("http://exeter.epsilon.com/mercurywebservice.asmx")

    trait PlatinumWebServiceSoap12Binding extends com.abhi.hotelrewards.PlatinumWebServiceSoap {
      import scalaxb.ElemName._
      def dateTimeOnServer(): Future[com.abhi.hotelrewards.DateTimeOnServerResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.abhi.hotelrewards.DateTimeOnServer(), Some("http://www.hotelrewards.com/webservices/"), "DateTimeOnServer", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://www.hotelrewards.com/webservices/DateTimeOnServer"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.abhi.hotelrewards.DateTimeOnServerResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "DateTimeOnServerResponse").head, Nil) }, {
              case x: scalaxb.Fault[_] => x
              case x => x
            })
      def platinumRequest(astrXML: Option[String], astrError: Option[String]): Future[com.abhi.hotelrewards.PlatinumRequestResponse] = 
        soapClient.requestResponse(scalaxb.toXML(com.abhi.hotelrewards.PlatinumRequest(astrXML, astrError), Some("http://www.hotelrewards.com/webservices/"), "PlatinumRequest", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://www.hotelrewards.com/webservices/PlatinumRequest"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.abhi.hotelrewards.PlatinumRequestResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "PlatinumRequestResponse").head, Nil) }, {
              case x: scalaxb.Fault[_] => x
              case x => x
            })
      def platinumRequest2(transactioN_XML: Option[String]): Future[com.abhi.hotelrewards.PlatinumRequest2Response] = 
        soapClient.requestResponse(scalaxb.toXML(com.abhi.hotelrewards.PlatinumRequest2(transactioN_XML), Some("http://www.hotelrewards.com/webservices/"), "PlatinumRequest2", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("http://www.hotelrewards.com/webservices/PlatinumRequest2"))).transform({ case (header, body) => 
            scalaxb.fromXML[com.abhi.hotelrewards.PlatinumRequest2Response](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "PlatinumRequest2Response").head, Nil) }, {
              case x: scalaxb.Fault[_] => x
              case x => x
            })
    }
  }



}

